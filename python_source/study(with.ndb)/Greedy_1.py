# <문제> 1이 될 때까지
# 어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 합니다. 단, 두번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있습니다.
# 1. N에서 1을 뺍니다.
# 2. N을 K로 나눕니다.
# 예를 들어 N이 17, K가 4라고 가정합시다. 이때 1번의 과정을 한 번 수행하면 16이 됩니다. 이후에 2번의 과정을 두 번 수행하면 N은 1이 됩니다. 결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 됩니다. 이는 N을 1로 만드는 최소 횟수입니다.
# N과 K가 주어질 때 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하세요.

# <정당성 분석> 가능하면 최대한 많이 나누는 작업이 최적의 해를 항상 보장한다. N이 아무리 큰 수여도, K로 계속 나눈다면 기하급수적으로 빠르게 줄일 수 있다.

# <내 풀이>
# N을 K로 먼저 나눠보고 안 되면 -1을 한다. (N이 1보다 작아질 때까지 반복)
n, k = map(int, input().split()) # N, K를 공백을 기준으로 구분하여 입력 받기
result =0
while n>1:
    if n%k==0:
        result+=1
        n//=k
    else:
        result+=1
        n-=1

print(result)

# <답안 예시>
n, k = map(int, input().split())
result =0
while True:
    target = (n//k) * k # N을 K로 나눈 수에 K를 곱하면, 주어진 N값이 K로 나누어 떨어지는 가장 가까운 값을 구할 수 있다.
    result += (n-target) # n에서 target을 뺀 수는 -1을 해야하는 횟수가 된다.
    n = target
    # ------------------------------윗부분이 약간의 테크닉임
    # N이 K보다 작을 때 (더 이상 나눌 수 없을 때) 반복문을 탈출한다.
    if n<k:
        break
    # 계속 연산을 진행한다면 N을 K로 나눠준다.
    result +=1 # N을 K로 나눠주는 연산을 1번 진행하므로 +1을 해준다.
    n //= k

#마지막으로 남은 수에 대하여 -1을 해야하는 횟수를 더해준다.
result += (n-1) # (n-1)을 한 이유는 N을 1로 만들어야 하기 때문이다.
print(result)

# <추가> 문제의 조건에서 N과 K가 10만 이하의 정수이다. 라면 테크닉 없이 계산을 해도 괜찮다. 다만 이후로는 테크닉을 사용하면 시간복잡도가 NlogN을 만들 수 있기에 기하급수적으로 빠른 속도를 구현한다. (십억, 백억도 가능)
