# <문제> 두 배열의 원소 교체
# 동빈이는 두 개의 배열 A와 B를 가지고 있습니다. 두 배열은 N개의 원소로 구성되어 있으며, 배열의 원소는 모두 자연수입니다.
# 동빈이는 최대 K 번의 바꿔치기 연산을 수행할 수 있는데, 바꿔치기 연산이란 배열 A에 있는 원소 하나와 배열 B에 있는 원소 하나를 골라서 두 원소를 서로 바꾸는 것을 말합니다.
# 동빈이의 최종 목표는 배열 A의 모든 원소의 합이 최대가 되도록 하는 것이며, 여러분은 동빈이를 도와야 합니다.
# N, K 그리고 배열 A와 B의 정보가 주어졌을 때, 최대 K 번의 바꿔치기 연산을 수행하여 만들 수 있는 배열 A의 모든 원소의 합의 최댓값을 출력하는 프로그램을 작성하세요.
# 예를 들어 N = 5, K = 3이고, 배열 A = [1,2,5,4,3] , 배열 B = [5,5,6,6,5] 일때, 세 번의 연산을 수행할 수 있습니다.
# 1/ A의 1과 B의 6 바꾸기, 2/ A의 2와 B의 6 바꾸기, 3/ A의 3과 B의 5 바꾸기
# 배열 A = [6,6,5,4,5], 배열 B = [3,5,1,2,5] 이때 배열 A의 모든 원소의 합은 26이 되며, 이보다 더합을 크게 만들 수는 없습니다.

# <내 풀이>
# A는 제일 작은 수를 B는 제일 큰 수를 골라 서로 바꾸기
n, k = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))

a.sort()
b.sort(reverse=True)

for i in range(k):
    a[i], b[i] = b[i], a[i]

print(sum(a))

# <해결 아이디어>
# 매번 배열 A에서 가장 작은 원소를 골라서, 배열 B에서 가장 큰 원소와 교체합니다.
# A의 원소가 B의 원소보다 작을 때에만 교체를 수행합니다.
# 이 문제에서는 두 배열의 원소가 최대 100,000개까지 입력될 수 있으므로, 최악의 경우 O(NlogN)을 보장하는 정렬 알고리즘을 이용해야 합니다.

# <답안 예시>
n, k = map(int, input().split()) # N과 K를 입력 받기
a = list(map(int, input().split())) # 배열 A의 모든 원소를 입력 받기
b = list(map(int, input().split())) # 배열 B의 모든 원소를 입력 받기

a.sort() # 배열 A는 오름차순 정렬 수행
b.sort(reverse=True) # 배열 B는 내림차순 정렬 수행

# 첫 번째 인덱스부터 확인하며, 두 배열의 원소를 최대 K번 비교
for i in range(k):
    # A의 원소가 B의 원소보다 작은 경우
    if a[i] < b[i]:
        # 두 원소를 교체
        a[i], b[i] = b[i], a[i]
    else: # A의 원소가 B의 원소보다 크거나 같을 때, 반복문을 탈출
        break

print(sum(a))   # 배열 A의 모든 원소의 합을 출력

# <추가> 두 수가 같을 경우의 조건을 생각하지 못함. ,, 다음에는 잘 생각해보기.